---
title: "lab6"
author: "Leona Myers"
date: "04/02/2025"
format: html
execute:
  echo: true
---

```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(ggthemes)
library(ggplot2)
library(sf)
library(patchwork)
library(xgboost)
```
```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
```

```{r}
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')
```
```{r}
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
```

```{r}
# Where the files live online ...
remote_files  <- glue('{root}/camels_{types}.txt')
# where we want to download the data ...
local_files   <- glue('data/camels_{types}.txt')
```

```{r}
walk2(remote_files, local_files, download.file, quiet = TRUE)
```

```{r}
# Read and merge data
camels <- map(local_files, read_delim, show_col_types = FALSE) 
```

```{r}
camels <- power_full_join(camels ,by = 'gauge_id')
```

# Question 1: Your Turn
## zero_r_freq represents the frequency of zero flow days 
```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```
# Question 2: Your Turn 
```{r}
camels <- camels %>%
  rename(lat = gauge_lat, lon = gauge_lon)
```

```{r}
camels_sf <- st_as_sf(camels, coords = c("lon", "lat"), crs = 4326)
```

```{r}
map_aridity <- ggplot(camels_sf) +
  geom_sf(aes(color = aridity), size = 2) +
  scale_color_viridis_c(option = "magma", direction = -1) + # Magma colormap (high contrast)
  labs(title = "Aridity Across Sites", color = "Aridity Index") +
  theme_minimal()
map_aridity
```
```{r}
map_p_mean <- ggplot(camels_sf) +
  geom_sf(aes(color = p_mean), size = 2) +
  scale_color_viridis_c(option = "plasma", direction = -1) + # Plasma colormap
  labs(title = "Mean Precipitation Across Sites", color = "Precipitation (mm)") +
  theme_minimal()
map_p_mean
```
```{r}
final_plot <- map_aridity + map_p_mean + plot_layout(ncol = 2)
final_plot
```
# Lab walk-through Example
```{r}
camels |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()
```
```{r}
# Create a scatter plot of aridity vs rainfall
ggplot(camels, aes(x = aridity, y = p_mean)) +
  # Add points colored by mean flow
  geom_point(aes(color = q_mean)) +
  # Add a linear regression line
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  # Apply the viridis color scale
  scale_color_viridis_c() +
  # Add a title, axis labels, and theme (w/ legend on the bottom)
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```
```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  # Apply log transformations to the x and y axes
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```
```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  # Apply a log transformation to the color scale
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        # Expand the legend width ...
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```
```{r}
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a 
# recipe. So, we'll do it here.
camels <- camels |> 
  mutate(logQmean = log(q_mean))

# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```

```{r}
# Create a recipe to preprocess the data
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  # Log transform the predictor variables (aridity and p_mean)
  step_log(all_predictors()) %>%
  # Add an interaction term between aridity and p_mean
  step_interact(terms = ~ aridity:p_mean) |> 
  # Drop any rows with missing values in the pred
  step_naomit(all_predictors(), all_outcomes())
```

```{r}
# Prepare the data
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

# Interaction with lm
#  Base lm sets interaction terms with the * symbol
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)
```
```{r}
# Sanity Interaction term from recipe ... these should be equal!!
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
```


```{r}
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```

```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```

```{r}
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  # Apply a gradient color scale
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```
```{r}
# Define model
lm_model <- linear_reg() %>%
  # define the engine
  set_engine("lm") %>%
  # define the mode
  set_mode("regression")

# Instantiate a workflow ...
lm_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(lm_model) %>%
  # Fit the model to the training data
  fit(data = camels_train) 

# Extract the model coefficients from the workflow
summary(extract_fit_engine(lm_wf))$coefficients
```
```{r}
# From the base implementation
summary(lm_base)$coefficients
```
```{r}
#
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```

```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```
```{r}
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```
```{r}
library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  # Add the recipe
  add_recipe(rec) %>%
  # Add the model
  add_model(rf_model) %>%
  # Fit the model
  fit(data = camels_train) 
```

```{r}
rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)
```

```{r}
metrics(rf_data, truth = logQmean, estimate = .pred)
```
```{r}
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```
```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```
```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```
# Question 3: Your Turn
## Data Splitting
```{r}
set.seed(123)
camels <- camels |> 
  mutate(logQmean = log(q_mean))

camels_split <- initial_split(camels, prop = 0.75)

camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)

dim(camels_train)
dim(camels_test)  
```
## Recipe
### p_mean + aridity + frac_snow = camels_train
### I chose precipitation, arditity, and snow because they directly affect water availability. 
```{r}
rec <- recipe(logQmean ~ aridity + p_mean + frac_snow, data = camels_train) %>%
  step_naomit(all_predictors(), all_outcomes()) %>%  
  step_log(all_numeric_predictors(), offset = 1e-6) %>%  # 
  step_normalize(all_numeric_predictors()) %>%  
  step_interact(terms = ~ aridity:p_mean)  

```
## Define 3 models
### Model 1: Random Forest
```{r}
rf_model <- rand_forest(
  mode = "regression",       
  trees = 500               
) %>%
  set_engine("ranger")      
```
### Model 2: Linear Regression
```{r}
lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

```
### Model 3: Gradient Boosting
```{r}
gb_model <- boost_tree(
  mode = "regression",
  trees = 500,        
  learn_rate = 0.1     
) %>%
  set_engine("xgboost") 

```

## Workflow set ()
```{r}
library(tidymodels)

wf_lm <- workflow() %>%
  add_recipe(rec) %>%
  add_model(lm_model)

wf_rf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model)

wf_gb <- workflow() %>%
  add_recipe(rec) %>%
  add_model(gb_model)
```

```{r}
wf_set <- workflow_set(
  preproc = list(rec), 
  models = list(lm_model, rf_model, gb_model) 
)
```

```{r}
wf_results <- wf_set %>%
  workflow_map("fit_resamples", resamples = camels_cv)

```
## Evaluation
```{r}
autoplot(wf_results)
```
```{r}
rank_results(wf_results, rank_metric = "rmse")
```
### The random forest model is the best because it has the lowest RMSE and highest R squared. It can also model complex relationships between variables, it captures interactions between variables, and handles missing data and outliers well.

## Extract and Evaluate
```{r}
final_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model)
```

```{r}
final_fit <- final_wf %>% fit(data = camels_train)
```

```{r}
test_predictions <- augment(final_fit, new_data = camels_test)
```

```{r}
ggplot(test_predictions, aes(x = logQmean, y = .pred)) +
  geom_point(alpha = 0.6, color = "#1f77b4") +  # Scatter plot with transparency
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") + # 1:1 line
  labs(
    title = "Observed vs. Predicted logQmean",
    x = "Observed logQmean",
    y = "Predicted logQmean"
  ) +
  theme_minimal()
```
### The results seem strong, the points are mostly close to the 1:1 line indicating the model is performing well on the test data
